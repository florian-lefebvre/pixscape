/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.thema.pixscape;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.Point;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.geom.Rectangle2D;
import java.awt.image.BandedSampleModel;
import java.awt.image.DataBuffer;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.CancellationException;
import java.util.logging.ConsoleHandler;
import java.util.logging.Filter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.geotools.coverage.grid.GridCoordinates2D;
import org.geotools.coverage.grid.GridCoverage2D;
import org.geotools.coverage.grid.InvalidGridGeometryException;
import org.geotools.geometry.DirectPosition2D;
import org.opengis.referencing.operation.TransformException;
import org.thema.common.Config;
import org.thema.common.JavaLoader;
import org.thema.common.ProgressBar;
import org.thema.common.Util;
import org.thema.common.swing.LoggingFrame;
import org.thema.common.swing.PreferencesDialog;
import org.thema.data.GlobalDataStore;
import org.thema.data.IOImage;
import org.thema.data.feature.DefaultFeature;
import org.thema.drawshape.image.CoverageShape;
import org.thema.drawshape.image.RasterShape;
import org.thema.drawshape.layer.DefaultGroupLayer;
import org.thema.drawshape.layer.FeatureLayer;
import org.thema.drawshape.layer.RasterLayer;
import org.thema.drawshape.style.FeatureStyle;
import org.thema.drawshape.style.PointStyle;
import org.thema.drawshape.style.RasterStyle;
import org.thema.drawshape.style.table.ColorRamp;
import org.thema.drawshape.style.table.UniqueColorTable;
import org.thema.drawshape.ui.MapViewer;
import org.thema.parallel.ExecutorService;
import org.thema.pixscape.Project.Aggregate;
import org.thema.process.Vectorizer;

/**
 *
 * @author gvuidel
 */
public class MainFrame extends javax.swing.JFrame {
    
    private Project project;
    private DefaultGroupLayer rootLayer;
    
    private final LoggingFrame logFrame;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/org/thema/pixscape/ressources/ico64_graphab.png")));
        initComponents();
        setLocationRelativeTo(null);
        setTitle("PixScape - " + getVersion());
        mapViewer.putAddLayerButton();
        Config.setProgressBar(mapViewer.getProgressBar());
        logFrame = new LoggingFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapViewer = new org.thema.drawshape.ui.MapViewer();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProjectMenuItem = new javax.swing.JMenuItem();
        loadProjectMenuItem = new javax.swing.JMenuItem();
        loadDSMMenuItem = new javax.swing.JMenuItem();
        loadLandUseMenuItem = new javax.swing.JMenuItem();
        prefMenuItem = new javax.swing.JMenuItem();
        logMenuItem = new javax.swing.JMenuItem();
        visMenu = new javax.swing.JMenu();
        viewShedMenuItem = new javax.swing.JMenuItem();
        viewTanMenuItem = new javax.swing.JMenuItem();
        totViewMenuItem = new javax.swing.JMenuItem();
        totViewTanMenuItem = new javax.swing.JMenuItem();
        pathViewMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        mapViewer.setTreeLayerVisible(true);

        fileMenu.setText("File");

        newProjectMenuItem.setText("New project");
        newProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProjectMenuItem);

        loadProjectMenuItem.setText("Load Project");
        loadProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadProjectMenuItem);

        loadDSMMenuItem.setText("Set DSM...");
        loadDSMMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDSMMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadDSMMenuItem);

        loadLandUseMenuItem.setText("Set land use...");
        loadLandUseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLandUseMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadLandUseMenuItem);

        prefMenuItem.setText("Preferences...");
        prefMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(prefMenuItem);

        logMenuItem.setText("Log window");
        logMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(logMenuItem);

        menuBar.add(fileMenu);

        visMenu.setText("Visibility");

        viewShedMenuItem.setText("Viewshed...");
        viewShedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewShedMenuItemActionPerformed(evt);
            }
        });
        visMenu.add(viewShedMenuItem);

        viewTanMenuItem.setText("View tan...");
        viewTanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTanMenuItemActionPerformed(evt);
            }
        });
        visMenu.add(viewTanMenuItem);

        totViewMenuItem.setText("Global visibility");
        totViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totViewMenuItemActionPerformed(evt);
            }
        });
        visMenu.add(totViewMenuItem);

        totViewTanMenuItem.setText("Global tan");
        totViewTanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totViewTanMenuItemActionPerformed(evt);
            }
        });
        visMenu.add(totViewTanMenuItem);

        pathViewMenuItem.setText("Path view");
        pathViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathViewMenuItemActionPerformed(evt);
            }
        });
        visMenu.add(pathViewMenuItem);

        menuBar.add(visMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadProjectMenuItemActionPerformed
        File file = Util.getFile(".xml", "Project file");
        if(file == null)
            return;
        try {
            project = Project.loadProject(file);
            rootLayer = project.getLayers();
            mapViewer.setRootLayer(rootLayer);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error while loading project : " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_loadProjectMenuItemActionPerformed

    private void viewShedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewShedMenuItemActionPerformed
        final ViewShedDialog dlg = new ViewShedDialog(this, mapViewer);
        dlg.setVisible(true);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                // on attend que la boite de dialogue soit fermée
                while(dlg.isDisplayable()) 
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                if(!dlg.isOk)    
                    return;
                
                try {
                    WritableRaster viewShed = project.calcViewShed(dlg.point, dlg.startZ, dlg.destZ, dlg.direct, dlg.bounds);
                    RasterLayer l = new RasterLayer("Viewshed-" + (dlg.direct?"direct":"indirect"), new RasterShape(viewShed, 
                            project.getDtmCov().getEnvelope2D(), new RasterStyle(
                                    new Color[] {new Color(0, 0, 0, 200), new Color(0, 0, 0, 20)}), true), project.getCRS());
                    l.setRemovable(true);
                    rootLayer.addLayerFirst(l);
                } catch (InvalidGridGeometryException | TransformException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
    }//GEN-LAST:event_viewShedMenuItemActionPerformed

    private void totViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totViewMenuItemActionPerformed
        final GlobalViewDialog dlg = new GlobalViewDialog(this, false, project.getCodes());
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                globalView(dlg);
            }
        }).start();
    }//GEN-LAST:event_totViewMenuItemActionPerformed

    private void loadLandUseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLandUseMenuItemActionPerformed
        File file = Util.getFile(".tif|.asc", "Raster");
        if(file == null)
            return;
        try {
            GridCoverage2D cov = IOImage.loadCoverage(file);
            project.setLandUse(cov);
            rootLayer.addLayerFirst(new RasterLayer("Land use", new CoverageShape(cov, new RasterStyle(
                    new UniqueColorTable((Map)project.getLandColors())))));
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error : " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_loadLandUseMenuItemActionPerformed

    private void loadDSMMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDSMMenuItemActionPerformed
        File file = Util.getFile(".tif|.asc", "Raster");
        if(file == null)
            return;
        try {
            GridCoverage2D cov = IOImage.loadCoverage(file);
            project.setDSM(cov);
            rootLayer.addLayerFirst(new RasterLayer("DSM", new CoverageShape(cov, new RasterStyle(ColorRamp.RAMP_TEMP))));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error : " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_loadDSMMenuItemActionPerformed

    private void viewTanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTanMenuItemActionPerformed
        final ViewTanDialog dlg = new ViewTanDialog(this, mapViewer);
        dlg.setVisible(true);
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                // on attend que la boite de dialogue soit fermée
                while(dlg.isDisplayable()) 
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                if(!dlg.isOk)    
                    return;
                
                try {
                    WritableRaster viewTan = project.calcViewTan(dlg.point, dlg.startZ, dlg.precision*Math.PI/180, //Math.PI/(project.getDtm().getWidth()+project.getDtm().getHeight()), 
                            dlg.bounds);
                    // create landuse, z and dist images.
                    GridCoordinates2D c = project.getDtmCov().getGridGeometry().worldToGrid(dlg.point);
                    WritableRaster viewTanZ = Raster.createWritableRaster(new BandedSampleModel(DataBuffer.TYPE_FLOAT, 
                            viewTan.getWidth(), viewTan.getHeight(), 1), null);
                    WritableRaster viewTanDist = Raster.createWritableRaster(new BandedSampleModel(DataBuffer.TYPE_FLOAT, 
                            viewTan.getWidth(), viewTan.getHeight(), 1), null);
                    WritableRaster viewTanLand = Raster.createWritableRaster(new BandedSampleModel(DataBuffer.TYPE_BYTE, 
                            viewTan.getWidth(), viewTan.getHeight(), 1), null);
                    
                    project.fillViewTan(c, viewTan, viewTanZ, viewTanDist, viewTanLand);
                    
                    DefaultGroupLayer gl = new DefaultGroupLayer("Views", true);
                    RasterStyle s = new RasterStyle(ColorRamp.RAMP_DEM);
                    s.setNoDataValue(-1000);
                    Rectangle2D r = new Rectangle2D.Double(-180, -90, 360, 180);
                    gl.addLayerFirst(new RasterLayer("Elevation", new RasterShape(viewTanZ, r, s, true)));
                    s = new RasterStyle();
                    s.setNoDataValue(-1);
                    gl.addLayerFirst(new RasterLayer("Distance", new RasterShape(viewTanDist, r, s, true)));
                    if(project.hasLandUse()) {
                        s = new RasterStyle(new UniqueColorTable((Map)project.getLandColors()));
                        s.setNoDataValue(255);
                        gl.addLayerFirst(new RasterLayer("Land use", new RasterShape(viewTanLand, r, s, true)));
                    }
                    MapViewer viewer = new MapViewer();
                    viewer.setRootLayer(gl);
                    viewer.setTreeLayerVisible(true);
                    JDialog dlg = new JDialog(MainFrame.this);
                    dlg.getContentPane().add(viewer, BorderLayout.CENTER);
                    dlg.pack();
                    dlg.setVisible(true);
                } catch (InvalidGridGeometryException | TransformException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
    }//GEN-LAST:event_viewTanMenuItemActionPerformed

    private void prefMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefMenuItemActionPerformed
        PreferencesDialog dlg = new PreferencesDialog(this, true);
        dlg.setProcPanelVisible(true);
        dlg.setVisible(true);
    }//GEN-LAST:event_prefMenuItemActionPerformed

    private void logMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logMenuItemActionPerformed
        logFrame.setVisible(true);
    }//GEN-LAST:event_logMenuItemActionPerformed

    private void pathViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathViewMenuItemActionPerformed
        final PathViewDialog dlg = new PathViewDialog(this);
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        new Thread(new Runnable() {
            @Override
            public void run() {
                ProgressBar progressBar = Config.getProgressBar("Path viewshed...");
                try {
                    List<DefaultFeature> viewSheds = new ArrayList<>();
                    Map<Object, DefaultFeature> pathMap = GlobalDataStore.createDataStore(dlg.pathFile.getParentFile()).getMapFeatures(dlg.pathFile.getName(), dlg.idField);
                    List<DefaultFeature> path = new ArrayList<>(new TreeMap<>(pathMap).values());
                    progressBar.setMaximum(path.size());
                    for(int i = 0; i < path.size()-1; i++) {
                        Point p1 = path.get(i).getGeometry().getCentroid();
                        Point p2 = path.get(i+1).getGeometry().getCentroid();
                        double dir = Bounds.rad2deg(Math.atan2(p2.getY()-p1.getY(), p2.getX()-p1.getX()));
                        WritableRaster viewShed = project.calcViewShed(new DirectPosition2D(p1.getX(), p1.getY()), dlg.startZ, -1, true, dlg.bounds.createBounds(dir));
                        Geometry view = Vectorizer.vectorize(viewShed, 1);
                        view.apply(project.getGrid2space());
                        viewSheds.add(new DefaultFeature(path.get(i).getId(), view));
                        progressBar.incProgress(1);
                    }
                    FeatureLayer l = new FeatureLayer("Path viewshed", viewSheds, new FeatureStyle(new Color(0, 0, 255, 20), null), project.getCRS());
                    l.setRemovable(true);
                    rootLayer.addLayerFirst(l);
                    l = new FeatureLayer("Path", path, new PointStyle());
                    l.setRemovable(true);
                    rootLayer.addLayerFirst(l);
                } catch (IOException | InvalidGridGeometryException | TransformException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(MainFrame.this, "An error has occured : " + ex);
                } finally {
                    progressBar.close();
                }
            }
        }).start();
        
    }//GEN-LAST:event_pathViewMenuItemActionPerformed

    private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuItemActionPerformed
        NewProjectDialog dlg = new NewProjectDialog(this, true);
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        
        try {
            GridCoverage2D dtm = IOImage.loadCoverage(dlg.dtm);
            dlg.path.mkdir();
            project = new Project(dlg.name, dlg.path, dtm, dlg.resZ);
            rootLayer = project.getLayers();
            mapViewer.setRootLayer(rootLayer);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(MainFrame.this, "An error has occured while creating project : " + ex);
        }
    }//GEN-LAST:event_newProjectMenuItemActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if(project != null)
            project.close();
    }//GEN-LAST:event_formWindowClosed

    private void totViewTanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totViewTanMenuItemActionPerformed
        final GlobalViewDialog dlg = new GlobalViewDialog(this, true, project.getCodes());
        dlg.setVisible(true);
        if(!dlg.isOk)
            return;
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                globalView(dlg);
            }
        }).start();
    }//GEN-LAST:event_totViewTanMenuItemActionPerformed

    private void globalView(GlobalViewDialog dlg) {
        ProgressBar progressBar = Config.getProgressBar("Visibility...");
        RasterStyle s = new RasterStyle(ColorRamp.RAMP_INVGRAY);
        s.setNoDataValue(-1);
        if(dlg.from == null || (dlg.aggr == Aggregate.SUM && dlg.from.equals(project.getCodes()) && dlg.to.equals(project.getCodes()))) {
            GlobalViewTask task = dlg.isTangent() ? new GlobalViewTask(dlg.startZ, dlg.anglePrec, dlg.bounds, dlg.sample, null, progressBar) :
                    new GlobalViewTask(dlg.startZ, -1, dlg.direct, dlg.bounds, dlg.sample, null, progressBar);
            ExecutorService.execute(task);
            WritableRaster view = task.getResult();
            RasterLayer l = new RasterLayer("Aggr. view - " + (dlg.direct?"direct":"indirect"), new RasterShape(view,
                    project.getDtmCov().getEnvelope2D(), s, true), project.getCRS());
            l.setRemovable(true);
            rootLayer.addLayerFirst(l);
        } else {
            if(dlg.aggr == Aggregate.NONE) {
                GlobalViewLandUseTask task = dlg.isTangent() ? new GlobalViewLandUseTask(dlg.startZ, dlg.anglePrec, dlg.bounds, dlg.from, dlg.to, dlg.sample, null, progressBar) :
                        new GlobalViewLandUseTask(dlg.startZ, -1, dlg.direct, dlg.bounds, dlg.from, dlg.to, dlg.sample, null, progressBar);
                ExecutorService.execute(task);
                Map<Integer, WritableRaster> views = task.getResult();
                for(Integer code : views.keySet()) {
                    s = new RasterStyle(new Color[]{Color.black, project.getLandColors().get(code.doubleValue())});
                    s.setNoDataValue(-1);
                    RasterLayer l = new RasterLayer("Aggr. view - " + (dlg.direct?"direct":"indirect") + " for " + code,
                            new RasterShape(views.get(code), project.getDtmCov().getEnvelope2D(), s, true), project.getCRS());
                    l.setRemovable(true);
                    rootLayer.addLayerFirst(l);
                }
            } else {
                GlobalViewTask task = dlg.isTangent() ? new GlobalViewTask(dlg.startZ, dlg.anglePrec, dlg.bounds, dlg.from, dlg.to, dlg.aggr, dlg.sample, null, progressBar) :
                        new GlobalViewTask(dlg.startZ, -1, dlg.direct, dlg.bounds, dlg.from, dlg.to, dlg.aggr, dlg.sample, null, progressBar);
                ExecutorService.execute(task);
                WritableRaster view = task.getResult();
                String name = dlg.aggr == Aggregate.SUM ? "Sum" : "Shannon"; 
                RasterLayer l = new RasterLayer(name + " - " + (dlg.direct?"direct":"indirect") + " for " + (dlg.direct ? dlg.to : dlg.from),
                        new RasterShape(view, project.getDtmCov().getEnvelope2D(), s, true), project.getCRS());
                l.setRemovable(true);
                rootLayer.addLayerFirst(l);
            }
        }
        progressBar.close();
    }

    public static String getVersion() {
        String version = MainFrame.class.getPackage().getImplementationVersion();
        if(version == null)
            return "unpackage version";
        else
            return version;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        
        // Disable logging of FileSystemPreferences
        // Causes a lot of logs in parallel environments
        Logger globalLogger = Logger.getLogger("");
        Handler[] handlers = globalLogger.getHandlers();
        for(Handler handler : handlers) {
            if(handler instanceof ConsoleHandler)
                globalLogger.removeHandler(handler);
        }
        ConsoleHandler h = new ConsoleHandler();
        h.setFilter(new Filter() {
            @Override
            public boolean isLoggable(LogRecord record) {
                return !record.getSourceClassName().equals("java.util.prefs.FileSystemPreferences");
            }
        });
        globalLogger.addHandler(h);
        
        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
            public void uncaughtException(Thread t, Throwable e) {
                Logger.getLogger("").log(Level.SEVERE, null, e);
            }
        });
        
        Config.setNodeClass(MainFrame.class);
        
        // MPI Execution
        if(args.length > 0 && args[0].equals("-mpi")) {
            try {
                new MpiLauncher(Arrays.copyOfRange(args, 1, args.length)).run();
                System.exit(0);
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
        }

        // CLI execution
        if(args.length > 0 && !args[0].equals(JavaLoader.NOFORK)) {        
            try {
                new CLITools().execute(args);
            } catch (Throwable ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(1);
            }
            System.exit(0);
        }
        
        // UI execution
        // Relaunch java with preferences memory
        try {
            if(args.length == 0)
                if(JavaLoader.launchApp(MainFrame.class, 2048))
                    System.exit(0);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Default execution    
        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
            @Override
            public void uncaughtException(Thread t, Throwable e) {
                if(e instanceof CancellationException) {
                    JOptionPane.showMessageDialog(null, "Execution has been cancelled");
                } else {
                    Logger.getLogger("").log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(null, "An error has occurred : " + e);
                }
            }
        });
        
        PreferencesDialog.initLanguage();

        try {  // Set System L&F
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.WARNING, null, e);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem loadDSMMenuItem;
    private javax.swing.JMenuItem loadLandUseMenuItem;
    private javax.swing.JMenuItem loadProjectMenuItem;
    private javax.swing.JMenuItem logMenuItem;
    private org.thema.drawshape.ui.MapViewer mapViewer;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newProjectMenuItem;
    private javax.swing.JMenuItem pathViewMenuItem;
    private javax.swing.JMenuItem prefMenuItem;
    private javax.swing.JMenuItem totViewMenuItem;
    private javax.swing.JMenuItem totViewTanMenuItem;
    private javax.swing.JMenuItem viewShedMenuItem;
    private javax.swing.JMenuItem viewTanMenuItem;
    private javax.swing.JMenu visMenu;
    // End of variables declaration//GEN-END:variables
}
