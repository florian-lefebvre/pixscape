/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.thema.pixscape;


import com.vividsolutions.jts.geom.Geometry;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.image.Raster;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.geotools.coverage.grid.InvalidGridGeometryException;
import org.geotools.geometry.DirectPosition2D;
import org.opengis.referencing.operation.TransformException;
import org.thema.data.feature.DefaultFeature;
import org.thema.drawshape.PanelMap;
import org.thema.drawshape.PointShape;
import org.thema.drawshape.SelectableShape;
import org.thema.drawshape.image.RasterShape;
import org.thema.drawshape.layer.DefaultGroupLayer;
import org.thema.drawshape.layer.DefaultLayer;
import org.thema.drawshape.layer.FeatureLayer;
import org.thema.drawshape.layer.Layer;
import org.thema.drawshape.layer.RasterLayer;
import org.thema.drawshape.style.FeatureStyle;
import org.thema.drawshape.style.PointStyle;
import org.thema.drawshape.style.RasterStyle;
import org.thema.drawshape.style.table.UniqueColorTable;
import org.thema.drawshape.ui.MapViewer;
import org.thema.pixscape.view.MultiViewShedResult;
import org.thema.pixscape.view.ViewResult;
import org.thema.process.Vectorizer;

/**
 *
 * @author gvuidel
 */
public class ViewShedDialog extends javax.swing.JDialog implements PanelMap.ShapeMouseListener {

    private boolean isOk = false;
    private Bounds bounds;
    
    private final MapViewer mapViewer;
    private final Project project;

    private PointShape centreShape;
    private DefaultLayer centreLayer;
    private DefaultGroupLayer layers;
    
    private final MetricResultDialog metricDlg;
    
    /** Creates new form ViewShedDialog */
    public ViewShedDialog(Frame parent, Project project, MapViewer mapViewer) {
        super(parent, false);
        this.project = project;
        initComponents();
        getRootPane().setDefaultButton(updateButton);
        
        multiScaleCheckBox.setEnabled(project.hasMultiScale());
        
        zEyeTextField.setText(""+project.getStartZ());
        minDistTextField.setText(""+project.getMinDistMS());
        
        
        this.mapViewer = mapViewer;
        double x = mapViewer.getLayers().getBounds().getCenterX();
        double y = mapViewer.getLayers().getBounds().getCenterY();
        pointTextField.setText(x + ", " + y);
        
        metricDlg = new MetricResultDialog(this, false, project.getDefaultScale().getCodes());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pointTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        zEyeTextField = new javax.swing.JTextField();
        directCheckBox = new javax.swing.JCheckBox();
        boundsButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        zDestTextField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        multiScaleCheckBox = new javax.swing.JCheckBox();
        minDistTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        rasterRadioButton = new javax.swing.JRadioButton();
        vectorRadioButton = new javax.swing.JRadioButton();
        metricsButton = new javax.swing.JButton();

        setTitle("Viewshed");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        okButton.setText("Close");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Point");

        pointTextField.setText("0.0 , 0.0 ");

        jLabel2.setText("Z eye");

        zEyeTextField.setText("1.8");

        directCheckBox.setSelected(true);
        directCheckBox.setText("direct");

        boundsButton.setText("Bounds...");
        boundsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boundsButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Z dest");

        zDestTextField.setText("-1");

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        multiScaleCheckBox.setText("Multi scale - Min distance : ");

        minDistTextField.setText("500");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, multiScaleCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), minDistTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        buttonGroup1.add(rasterRadioButton);
        rasterRadioButton.setSelected(true);
        rasterRadioButton.setText("Raster transparency");

        buttonGroup1.add(vectorRadioButton);
        vectorRadioButton.setText("Polygon");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rasterRadioButton)
                    .add(vectorRadioButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(rasterRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(vectorRadioButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        metricsButton.setText("Metrics");
        metricsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(updateButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pointTextField))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(zDestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(zEyeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(directCheckBox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 74, Short.MAX_VALUE)
                                .add(boundsButton))))
                    .add(layout.createSequentialGroup()
                        .add(multiScaleCheckBox)
                        .add(18, 18, 18)
                        .add(minDistTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(metricsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {cancelButton, okButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(pointTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(zEyeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(directCheckBox)
                    .add(boundsButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(zDestTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(multiScaleCheckBox)
                    .add(minDistTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cancelButton)
                            .add(okButton)
                            .add(updateButton)))
                    .add(metricsButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        isOk = true;
        doClose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void boundsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boundsButtonActionPerformed
        BoundsDialog dlg = new BoundsDialog((Frame) this.getParent(), bounds == null ? new Bounds() : bounds);
        dlg.setVisible(true);
        if(dlg.isOk) {
            bounds = dlg.bounds;
        }
    }//GEN-LAST:event_boundsButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String[] coords = pointTextField.getText().split(",");
        Point2D p = new Point2D.Double(Double.parseDouble(coords[0]), Double.parseDouble(coords[1]));
        mouseClicked(p, null, null, 0);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void metricsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricsButtonActionPerformed
        metricDlg.setLocation(getX(), getY() + getHeight());
        metricDlg.setVisible(true);
    }//GEN-LAST:event_metricsButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        mapViewer.addMouseListener(this);
        mapViewer.setCursorMode(PanelMap.INPUT_CURSOR_MODE);
        String[] coords = pointTextField.getText().split(",");
        Point2D p = new Point2D.Double(Double.parseDouble(coords[0]), Double.parseDouble(coords[1]));
        centreShape = new PointShape(p);
        centreShape.setStyle(new PointStyle(Color.BLACK, Color.RED));
        centreLayer = new DefaultLayer("Centre", centreShape);
        centreLayer.setRemovable(true);
        layers = new DefaultGroupLayer("ViewShed", true);
        layers.setRemovable(true);
        layers.addLayerFirst(centreLayer);
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(layers);
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        mapViewer.removeShapeMouseListener(this);
        if(!isOk) {
            mapViewer.getLayers().removeLayer(layers);
        }
    }//GEN-LAST:event_formComponentHidden

    @Override
    public void mouseClicked(Point2D p, List<SelectableShape> shapes, MouseEvent sourceEvent, int cursorMode) {
        try {
            pointTextField.setText(p.getX() + "," + p.getY());
            centreShape.setPoint2D(p);
            for(Layer l : new ArrayList<>(layers.getLayers())) {
                if(!(l instanceof DefaultLayer)) {
                    layers.removeLayer(l);
                }
            }
            ViewResult result;
            Raster viewShed;
            if(multiScaleCheckBox.isSelected()) {
                MultiViewShedResult multiResult = project.getMultiComputeView(Double.parseDouble(minDistTextField.getText()))
                        .calcViewShed(new DirectPosition2D(p), Double.parseDouble(zEyeTextField.getText()),
                                Double.parseDouble(zDestTextField.getText()), directCheckBox.isSelected(), bounds == null ? new Bounds() : bounds);
                for(double res : multiResult.getViews().keySet()) {
                    addViewShedLayer(multiResult.getViews().get(res), res, (directCheckBox.isSelected()?"direct":"indirect") + "-" + res);
                }
//                addViewShedLayer(multiResult.getView(), project.getDefaultScale().getResolution(), directCheckBox.isSelected()?"direct":"indirect");
                result = multiResult;
            } else {
                result = project.getSimpleComputeView().calcViewShed(new DirectPosition2D(p), Double.parseDouble(zEyeTextField.getText()),
                    Double.parseDouble(zDestTextField.getText()), directCheckBox.isSelected(), bounds == null ? new Bounds() : bounds);
                viewShed = result.getView();
                addViewShedLayer(viewShed, project.getDefaultScale().getResolution(), directCheckBox.isSelected()?"direct":"indirect");
            }
            
            metricDlg.setResult(result);
            mapViewer.getMap().fullRepaint(); // normalement pas utile mais par moment bug du rafraichissement...
        } catch (InvalidGridGeometryException | TransformException ex) {
            Logger.getLogger(ViewShedDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addViewShedLayer(Raster view, double res, String name) {
        Layer layer;
        if(rasterRadioButton.isSelected()) {
//            layer = new RasterLayer("Viewshed-" + name, new RasterShape(view,
//                        project.getScaleDatas().get(res).getGridGeometry().getEnvelope2D(), new RasterStyle( 
//                                new Color[] {new Color(0, 0, 0, 120), new Color(0, 0, 0, 0)}, 255, new Color(0, 0, 0, 0)), true), project.getCRS());
            layer = new RasterLayer("Viewshed-" + name, new RasterShape(view,
                        project.getScaleDatas().get(res).getGridGeometry().getEnvelope2D(), new RasterStyle(new UniqueColorTable(Arrays.asList(0.0, 1.0, 255.0), 
                                Arrays.asList(new Color(0, 0, 0, 120), new Color(0, 0, 0, 0), new Color(0, 0, 0, 0))), true), true), project.getCRS());
        } else {
            Geometry poly = Vectorizer.vectorize(view, 1);
            poly.apply(project.getScaleDatas().get(res).getGrid2Space());
            layer = new FeatureLayer("Viewshed-" + name, Arrays.asList(new DefaultFeature(name, poly)), 
                    new FeatureStyle(new Color(0, 0, 0, 40), null), project.getCRS());
        }
        layer.setRemovable(true);
        layers.addLayerLast(layer);
    }
    
    private void doClose() {
        setVisible(false);
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boundsButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox directCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton metricsButton;
    private javax.swing.JTextField minDistTextField;
    private javax.swing.JCheckBox multiScaleCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField pointTextField;
    private javax.swing.JRadioButton rasterRadioButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JRadioButton vectorRadioButton;
    private javax.swing.JTextField zDestTextField;
    private javax.swing.JTextField zEyeTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
