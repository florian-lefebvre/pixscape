
package org.thema.pixscape;

import java.util.Arrays;
import java.util.Set;
import javax.swing.table.DefaultTableModel;
import org.thema.pixscape.metric.MetricDialog;
import org.thema.pixscape.metric.ViewShedMetric;
import org.thema.pixscape.metric.ViewTanMetric;
import org.thema.pixscape.view.ViewResult;
import org.thema.pixscape.view.ViewShedResult;
import org.thema.pixscape.view.ViewTanResult;

/**
 * Dialog form for showing results for interactive metric calculation
 * @author Gilles Vuidel
 */
public class MetricResultDialog extends javax.swing.JDialog {

    private boolean isTan;
    private ViewResult result;
    private Set<Integer> codes;
    
    /** 
     * Creates new form MetricResultDialog 
     * @param parent the parent frame
     * @param isTan is tangential view ? or planimetric ?
     * @param codes the landuse codes
     */
    public MetricResultDialog(java.awt.Window parent, boolean isTan, Set<Integer> codes) {
        super(parent);
        initComponents();
        setLocationRelativeTo(parent);
        this.codes = codes;
        this.isTan = isTan;
    }

    /**
     * Sets the view result and update metrics if the form is visible.
     * @param result 
     */
    public void setResult(ViewResult result) {
        this.result = result;
        if(isVisible()) {
            updateMetric();
        }
    }
    
    /**
     * Calculates the metrics and update values in the table
     */
    private void updateMetric() {
        if(result == null) {
            return;
        }
        for(int i = 0; i < table.getRowCount(); i++) {
            Double[] res;
            if(isTan) {
                res = ((ViewTanMetric)table.getValueAt(i, 0)).calcMetric((ViewTanResult) result);
            } else {
                res = ((ViewShedMetric)table.getValueAt(i, 0)).calcMetric((ViewShedResult) result);
            }
            table.setValueAt(Arrays.deepToString(res), i, 1);
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        remButton = new javax.swing.JButton();

        setTitle("Metrics");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Metric", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        addButton.setText("Add...");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        remButton.setText("Remove");
        remButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(addButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 120, Short.MAX_VALUE)
                .add(remButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton)
                    .add(remButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        MetricDialog dlg = new MetricDialog(this, isTan, codes);
        dlg.setVisible(true);
        if(!dlg.isOk) {
            return;
        }
        Double [] res = null;
        if(result != null) {
            if(isTan) {
                res = ((ViewTanMetric)dlg.metric).calcMetric((ViewTanResult) result);
            } else {
                res = ((ViewShedMetric)dlg.metric).calcMetric((ViewShedResult) result);
            }
        }
        ((DefaultTableModel)table.getModel()).addRow(new Object[]{dlg.metric, Arrays.deepToString(res)});
    }//GEN-LAST:event_addButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       updateMetric();
    }//GEN-LAST:event_formComponentShown

    private void remButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remButtonActionPerformed
        for(int i = table.getRowCount()-1; i >= 0; i--) {
            if(table.getSelectionModel().isSelectedIndex(i)) {
                ((DefaultTableModel)table.getModel()).removeRow(i);
            }
        }
        
    }//GEN-LAST:event_remButtonActionPerformed

    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

}
